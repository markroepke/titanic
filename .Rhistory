atheism$response[atheism$response == 1] <- 1
atheism$response[atheism$response == 2] <- 0
independent_matrix <- model.matrix(object = ~ nationality + as.factor(year), data = atheism)
dependent_matrix <- matrix(atheism$response)
cv.lasso <- cv.glmnet(x = independent_matrix, y = dependent_matrix, family = "binomial")
library(glmnet)
library(magrittr)
load("atheism.Rdata")
atheism$response <- as.character(atheism$response)
atheism$response[atheism$response == 1] <- 1
atheism$response[atheism$response == 2] <- 0
atheism$sample <- runif(n = nrow(atheism), min = 0, max = 1)
atheism_train %>% filter(sample < 0.3)
atheism_test %>% filter(sample >= 0.3)
independent_matrix_train <- model.matrix(object = ~ nationality + as.factor(year), data = atheism_train)
dependent_matrix_train <- matrix(atheism_train$response)
independent_matrix_test <- model.matrix(object = ~ nationality + as.factor(year), data = atheism_test)
dependent_matrix_test <- matrix(atheism_test$response)
cv.lasso <- cv.glmnet(x = independent_matrix_train, y = dependent_matrix_train, family = "binomial")
library(glmnet)
library(magrittr)
load("atheism.Rdata")
atheism$response <- as.character(atheism$response)
atheism$response[atheism$response == 1] <- 1
atheism$response[atheism$response == 2] <- 0
atheism$sample <- runif(n = nrow(atheism), min = 0, max = 1)
atheism_train <- atheism %>% filter(sample < 0.3)
atheism_test <- atheism %>% filter(sample >= 0.3)
independent_matrix_train <- model.matrix(object = ~ nationality + as.factor(year), data = atheism_train)
dependent_matrix_train <- matrix(atheism_train$response)
independent_matrix_test <- model.matrix(object = ~ nationality + as.factor(year), data = atheism_test)
dependent_matrix_test <- matrix(atheism_test$response)
cv.lasso <- cv.glmnet(x = independent_matrix_train, y = dependent_matrix_train, family = "binomial")
lasso.model <- glmnet(x = independent_matrix_train, y = dependent_matrix_train, family = "binomial", lamba = )
atheism <- as.data.frame(atheism)
atheism$response <- as.character(atheism$response)
atheism$response[atheism$response == 1] <- 1
atheism$response[atheism$response == 2] <- 0
atheism$sample <- runif(n = nrow(atheism), min = 0, max = 1)
atheism_train <- atheism %>% filter(sample < 0.3)
atheism_test <- atheism %>% filter(sample >= 0.3)
install.packages("ranger")
?ranger
library(ranger)
R.Version()
library(ranger)
?ranger
library(iris)
iris
attach(iris)
iris <- iris
library(kmeans)
library(hclust)
library(glmnet)
library(ranger)
?hclust
iris <- iris
?ranger
library(ranger)
?ranger
model <- ranger(formula = Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, num.trees = 500)
model <- ranger(formula = Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = iris, num.trees = 500)
results <- data.frame(model$predictions, iris$Sepal.Length)
library(dplyr)
library(magrittr)
results <- data.frame(model$predictions, iris$Sepal.Length) %>%
mutate(
error = (predictions - Sepal.Length)/Sepal.Length
)
iris <- iris
model <- ranger(formula = Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = iris, num.trees = 500)
results <- data.frame(model$predictions, iris$Sepal.Length) %>%
mutate(
error = (model.predictions - iris.Sepal.Length)/Sepal.Length
)
iris <- iris
model <- ranger(formula = Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = iris, num.trees = 500)
results <- data.frame(model$predictions, iris$Sepal.Length) %>%
mutate(
error = (model.predictions - iris.Sepal.Length)/iris.Sepal.Length
)
hist(results$error)
hist(results$error, bidwidth = 0.01)
hist(results$error, binwidth = 0.01)
warnings()
?hist
hist(results$error, breaks = 100)
library(glmnet)
library(Matrix)
?cv.glmnet
?glmnet
lasso_cv <- cv.glmnet(x = matrix(Sepal.Width, Petal.Length, Petal.Width, data = iris),
y = matrix(Sepal.Length),
family = "gaussian",
alpha = 1,
standardize = TRUE)
lasso_cv <- cv.glmnet(x = matrix(iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width),
y = matrix(iris$Sepal.Length),
family = "gaussian",
alpha = 1,
standardize = TRUE)
lasso_cv <- cv.glmnet(x = as.matrix(iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width),
y = matrix(iris$Sepal.Length),
family = "gaussian",
alpha = 1,
standardize = TRUE)
?matrix
lasso_cv <- cv.glmnet(x = data.matrix(data.frame(iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width)),
y = matrix(iris$Sepal.Length),
family = "gaussian",
alpha = 1,
standardize = TRUE)
lasso_model <- glmnet(x = data.matrix(data.frame(iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width)),
y = matrix(iris$Sepal.Length),
family = "gaussian",
lambda = lasso_cv$lambda.1se,
alpha = 1,
standardize = TRUE))
lasso_model <- glmnet(x = data.matrix(data.frame(iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width)),
y = matrix(iris$Sepal.Length),
family = "gaussian",
lambda = lasso_cv$lambda.1se,
alpha = 1,
standardize = TRUE)
data.matrix(data.frame(iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width)
)
coef.glmnet(lasso_object)
coef.glmnet(lasso_model)
?predict
results <- data.frame(rf_model$predictions, predict(lasso_model, data.matrix(data.frame(iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width))), iris$Sepal.Length) %>%
mutate(
rf_se = (rf_model.predictions - iris.Sepal.Length)^2
)
rf_model <- ranger(formula = Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = iris, num.trees = 500)
results <- data.frame(rf_model$predictions, predict(lasso_model, data.matrix(data.frame(iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width))), iris$Sepal.Length) %>%
mutate(
rf_se = (rf_model.predictions - iris.Sepal.Length)^2
)
results <- data.frame(rf_model$predictions, predict(lasso_model, data.matrix(data.frame(iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width))), iris$Sepal.Length) %>%
mutate(
lasso_se = (s0 - iris.Sepal.Length)^2,
rf_se = (rf_model.predictions - iris.Sepal.Length)^2
)
mean(results$lasso_se)
mean(results$rf_se)
ridge_cv <- cv.glmnet(x = data.matrix(data.frame(iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width)),
y = matrix(iris$Sepal.Length),
family = "gaussian",
alpha = 1,
standardize = TRUE)
ridge_model <- glmnet(x = data.matrix(data.frame(iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width)),
y = matrix(iris$Sepal.Length),
family = "gaussian",
lambda = ridge_cv$lambda.1se,
alpha = 1,
standardize = TRUE)
iris <- iris
## CREATE RANDOM FOREST MODEL
rf_model <- ranger(formula = Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = iris, num.trees = 500)
## CREATE LASSO MODEL
lasso_cv <- cv.glmnet(x = data.matrix(data.frame(iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width)),
y = matrix(iris$Sepal.Length),
family = "gaussian",
alpha = 1,
standardize = TRUE)
lasso_model <- glmnet(x = data.matrix(data.frame(iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width)),
y = matrix(iris$Sepal.Length),
family = "gaussian",
lambda = lasso_cv$lambda.1se,
alpha = 1,
standardize = TRUE)
## CREATE RIDGE MODEL
ridge_cv <- cv.glmnet(x = data.matrix(data.frame(iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width)),
y = matrix(iris$Sepal.Length),
family = "gaussian",
alpha = 1,
standardize = TRUE)
ridge_model <- glmnet(x = data.matrix(data.frame(iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width)),
y = matrix(iris$Sepal.Length),
family = "gaussian",
lambda = ridge_cv$lambda.1se,
alpha = 1,
standardize = TRUE)
results <- data.frame(rf_model$predictions,
predict(lasso_model, data.matrix(data.frame(iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width))),
predict(ridge_model, data.matrix(data.frame(iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width))),
iris$Sepal.Length)
results <- data.frame(rf_model$predictions,
predict(lasso_model, data.matrix(data.frame(iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width))),
predict(ridge_model, data.matrix(data.frame(iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width))),
iris$Sepal.Length) %>%
mutate(
lasso_se = (s0 - iris.Sepal.Length)^2,
rf_se = (rf_model.predictions - iris.Sepal.Length)^,
ridge_se = (s0.1 - iris.Sepal.Length)^2
)
results <- data.frame(rf_model$predictions,
predict(lasso_model, data.matrix(data.frame(iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width))),
predict(ridge_model, data.matrix(data.frame(iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width))),
iris$Sepal.Length) %>%
mutate(
lasso_se = (s0 - iris.Sepal.Length)^2,
rf_se = (rf_model.predictions - iris.Sepal.Length)^2,
ridge_se = (s0.1 - iris.Sepal.Length)^2
)
mean(results$lasso_se)
mean(results$rf_se)
mean(results$ridge_se)
iris$sample <- runif(n = nrow(iris), min = 0, max = 1)
iris <- iris
iris$sample <- runif(n = nrow(iris), min = 0, max = 1)
iris_train <- iris %>%
filter(sample < 0.3)
iris_test <- iris %>%
filter(sample >= 0.3)
## CREATE RANDOM FOREST MODEL
rf_model <- ranger(formula = Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = iris_train, num.trees = 500)
## CREATE LASSO MODEL
lasso_cv <- cv.glmnet(x = data.matrix(data.frame(iris_train$Sepal.Width, iris_train$Petal.Length, iris_train$Petal.Width)),
y = matrix(iris_train$Sepal.Length),
family = "gaussian",
alpha = 1,
standardize = TRUE)
lasso_model <- glmnet(x = data.matrix(data.frame(iris_train$Sepal.Width, iris_train$Petal.Length, iris_train$Petal.Width)),
y = matrix(iris_train$Sepal.Length),
family = "gaussian",
lambda = lasso_cv$lambda.1se,
alpha = 1,
standardize = TRUE)
## CREATE RIDGE MODEL
ridge_cv <- cv.glmnet(x = data.matrix(data.frame(iris_train$Sepal.Width, iris_train$Petal.Length, iris_train$Petal.Width)),
y = matrix(iris_train$Sepal.Length),
family = "gaussian",
alpha = 1,
standardize = TRUE)
ridge_model <- glmnet(x = data.matrix(data.frame(iris_train$Sepal.Width, iris_train$Petal.Length, iris_train$Petal.Width)),
y = matrix(iris_train$Sepal.Length),
family = "gaussian",
lambda = ridge_cv$lambda.1se,
alpha = 1,
standardize = TRUE)
results <- data.frame(predict(rf_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
predict(lasso_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
predict(ridge_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
iris_test$Sepal.Length)
results <- data.frame(predict(rf_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
predict(lasso_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
predict(ridge_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
iris_test$Sepal.Length)
predict(rf_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width)))
results <- data.frame(predict(rf_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width)), type = "terminalNodes"),
predict(lasso_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
predict(ridge_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
iris_test$Sepal.Length)
results <- data.frame(getTerminalNodeIDs(rf_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
predict(lasso_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
predict(ridge_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
iris_test$Sepal.Length)
results <- data.frame(#predict(rf_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width)), type = "terminalNodes"),
predict(lasso_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
predict(ridge_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
iris_test$Sepal.Length)
results <- data.frame(#predict(rf_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width)), type = "terminalNodes"),
predict(lasso_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
predict(ridge_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
iris_test$Sepal.Length) %>%
mutate(
lasso_se = (s0 - iris_test.Sepal.Length)^2,
rf_se = (s0.1 - iris_test.Sepal.Length)^2#,
#ridge_se = (s0.1 - iris.Sepal.Length)^2
)
mean(results$lasso_se)
mean(results$rf_se)
class(rf_model)
results <- data.frame(predict(rf_model, data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
predict(lasso_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
predict(ridge_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
iris_test$Sepal.Length) %>%
mutate(
lasso_se = (s0 - iris_test.Sepal.Length)^2,
rf_se = (s0.1 - iris_test.Sepal.Length)^2#,
#ridge_se = (s0.1 - iris.Sepal.Length)^2
)
results <- data.frame(predict(rf_model, data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width)),
predict(lasso_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
predict(ridge_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
iris_test$Sepal.Length) %>%
mutate(
lasso_se = (s0 - iris_test.Sepal.Length)^2,
rf_se = (s0.1 - iris_test.Sepal.Length)^2#,
#ridge_se = (s0.1 - iris.Sepal.Length)^2
)
results <- data.frame(predict(rf_model, data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width)),
predict(lasso_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
predict(ridge_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
iris_test$Sepal.Length)
results <- data.frame(predict(rf_model, data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width)[,1:3]),
predict(lasso_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
predict(ridge_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
iris_test$Sepal.Length) %>%
mutate(
lasso_se = (s0 - iris_test.Sepal.Length)^2,
rf_se = (s0.1 - iris_test.Sepal.Length)^2#,
#ridge_se = (s0.1 - iris.Sepal.Length)^2
)
results <- data.frame(predict(rf_model, data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width)[1:3]),
predict(lasso_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
predict(ridge_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
iris_test$Sepal.Length) %>%
mutate(
lasso_se = (s0 - iris_test.Sepal.Length)^2,
rf_se = (s0.1 - iris_test.Sepal.Length)^2#,
#ridge_se = (s0.1 - iris.Sepal.Length)^2
)
results <- data.frame(predict(rf_model, data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width)[1:3,]),
predict(lasso_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
predict(ridge_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
iris_test$Sepal.Length) %>%
mutate(
lasso_se = (s0 - iris_test.Sepal.Length)^2,
rf_se = (s0.1 - iris_test.Sepal.Length)^2#,
#ridge_se = (s0.1 - iris.Sepal.Length)^2
)
results <- data.frame(predict(rf_model, data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width)[1:3,]),
predict(lasso_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
predict(ridge_model, data.matrix(data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width))),
iris_test$Sepal.Length)
test_ind_df <- data.frame(iris_test$Sepal.Width, iris_test$Petal.Length, iris_test$Petal.Width)
results <- data.frame(predict(rf_model, test_ind_df),
predict(lasso_model, data.matrix(test_ind_df)),
predict(ridge_model, data.matrix(test_ind_df)),
iris_test$Sepal.Length)
results <- data.frame(predict(rf_model, test_ind_df[,1:3]),
predict(lasso_model, data.matrix(test_ind_df)),
predict(ridge_model, data.matrix(test_ind_df)),
iris_test$Sepal.Length)
esults <- data.frame(predict(rf_model, test_ind_df[1:3]),
predict(lasso_model, data.matrix(test_ind_df)),
predict(ridge_model, data.matrix(test_ind_df)),
iris_test$Sepal.Length)
results <- data.frame(#predict(rf_model, test_ind_df[1:3]),
predict(lasso_model, data.matrix(test_ind_df)),
predict(ridge_model, data.matrix(test_ind_df)),
iris_test$Sepal.Length) %>%
predict(lasso_model, data.matrix(test_ind_df)),
predict(ridge_model, data.matrix(test_ind_df)),
iris_test$Sepal.Length)
results <- data.frame(#predict(rf_model, test_ind_df[1:3]),
predict(lasso_model, data.matrix(test_ind_df)),
predict(ridge_model, data.matrix(test_ind_df)),
iris_test$Sepal.Length)
results <- data.frame(predict(rf_model, test_ind_df)$predictions,
predict(lasso_model, data.matrix(test_ind_df)),
predict(ridge_model, data.matrix(test_ind_df)),
iris_test$Sepal.Length) %>%
mutate(
lasso_se = (s0 - iris_test.Sepal.Length)^2,
rf_se = (s0.1 - iris_test.Sepal.Length)^2#,
#ridge_se = (s0.1 - iris.Sepal.Length)^2
)
predict(rf_model, test_ind_df)$predictions
predict(rf_model, test_ind_df)
predict(rf_model, test_ind_df[1:3])
predict(lasso_model, data.matrix(test_ind_df))
data.matrix(test_ind_df)
predict(rf_model, test_ind_df)
predict(rf_model, test_ind_df[1])
predict(rf_model, test_ind_df[,1])
predict(rf_model, test_ind_df[,1:3])
predict(rf_model, test_ind_df[,1:3], type = "terminalNodes")
require(shapeship)
glmnet
library(diamonds)
install.packages("diamonds")
library(diamonds)
library(ggplot2)
library(diamonds)
head(diamonds)
library(ranger)
?ranger
rf <- ranger(formula = price ~ carat + cut + color +clarity + depth + table + x + y + z, data = diamonds)
sqrt((diamonds$price - rf$predictions)^2)
sqrt(mean((diamonds$price - rf$predictions)^2))
hist(diamonds$price)
plot(x = diamonds$price, y = rf$predictions)
df <- data.frame(diamonds$price, rf$predictions)
l
ggplot(data = df, aes(x = diamonds.price, y = rf.predictions)) + geom_point(alpha = 0.25) + geom_smooth()
summary(lm(diamonds.price ~ rf.predictions))
summary(lm(diamonds.price ~ rf.predictions, data = df))
plot(rf)
ggplot(data = df, aes(x = diamonds.price, y = rf.predictions)) + geom_point(alpha = 0.05) + geom_smooth()
df <- data.frame(diamonds$price, rf$predictions)
lm <- lm(diamonds.price ~ rf.predictions, data = df)
plot(lm)
df$error <- abs((df$diamonds.price - df$rf.predictions)/df$diamonds.price)
hist(df$error)
hist(df$error, bins = 100)
ggplot(df, aes(x = error)) + geom_histogram(binwidth = 0.05)
install.packages("plotly")
install.packages("plotly")
ggplotly()
library(plotly)
install.packages("lazyeval")
install.packages("lazyeval")
ggplotly()
library(plotly)
install.packages("installr")
update_r()
updater()
updateR()
library(installr)
updateR()
?pnorm
pnorm(1)
pnorm(-1)
install.packages("h2o")
?h20
?h2o
library(h2o)
library(Diamonds)
q("no")
rm(list = ls())
setwd("/mnt/c/Users/roepk_000/OneDrive/Documents/Data/data/kaggle/titanic")
# LOAD PACKAGES #
library(tidyverse)
library(glmnet)
library(ranger)
library(xgboost)
################
# PREPARE DATA #
################
# LOAD DATA #
train <- read_csv("input/train.csv")
install.packages("tidyverse")
install.packages("glmnet")
install.packages("ranger")
install.packages("xgboost")
rm(list = ls())
# setwd("/mnt/c/Users/roepk_000/OneDrive/Documents/Data/data/kaggle/titanic")
setwd("C://Users//roepk_000//OneDrive//Documents//Data//data//kaggle//titanic")
library(tidyverse)
library(glmnet)
library(ranger)
library(xgboost)
train <- read_csv("input//train.csv")
train <- read_csv("input//train.csv") %>%
# FORMAT VARIABLES #
mutate(passenger_id = as.factor(PassengerId),
survived = Survived,
first_class = ifelse(Pclass == 1, 1, 0),
second_class = ifelse(Pclass == 2, 1, 0),
third_class = ifelse(Pclass == 3, 1, 0),
female = ifelse(Sex == "female", 1, 0),
age = Age,
sibling_spouse = SibSp,
parent_child = Parch,
ticket_pc = ifelse(substr(train$Ticket, 1, 2) == "PC", 1, 0),
ticket_soto = ifelse(substr(train$Ticket, 1, 4) == "SOTO", 1, 0),
ticket_ston = ifelse(substr(train$Ticket, 1, 4) == "STON", 1, 0),
ticket_c_a = ifelse(substr(train$Ticket, 1, 4) == "C.A.", 1, 0),
ticket_ca = ifelse(substr(train$Ticket, 1, 2) == "CA", 1, 0),
ticket_a = ifelse(substr(train$Ticket, 1, 1) == "A", 1, 0),
ticket_3492 = ifelse(substr(train$Ticket, 1, 4) == "3493", 1, 0),
ticket_3470 = ifelse(substr(train$Ticket, 1, 4) == "3470", 1, 0),
ticket_1137 = ifelse(substr(train$Ticket, 1, 4) == "1137", 1, 0),
fare = Fare,
cabin_a = ifelse(substr(train$Cabin, 1, 1) == "A", 1, 0),
cabin_b = ifelse(substr(train$Cabin, 1, 1) == "B", 1, 0),
cabin_c = ifelse(substr(train$Cabin, 1, 1) == "C", 1, 0),
cabin_d = ifelse(substr(train$Cabin, 1, 1) == "D", 1, 0),
cabin_e = ifelse(substr(train$Cabin, 1, 1) == "E", 1, 0),
cabin_f = ifelse(substr(train$Cabin, 1, 1) == "F", 1, 0),
cabin_g = ifelse(substr(train$Cabin, 1, 1) == "G", 1, 0),
cabin_t = ifelse(substr(train$Cabin, 1, 1) == "T", 1, 0),
embark_cherbourg = ifelse(Embarked == "C", 1, 0),
embark_queenstown = ifelse(Embarked == "Q", 1, 0))
train <- read_csv("input//train.csv") %>%
# FORMAT VARIABLES #
mutate(passenger_id = as.factor(PassengerId),
survived = Survived,
first_class = ifelse(Pclass == 1, 1, 0),
second_class = ifelse(Pclass == 2, 1, 0),
third_class = ifelse(Pclass == 3, 1, 0),
female = ifelse(Sex == "female", 1, 0),
age = Age,
sibling_spouse = SibSp,
parent_child = Parch,
ticket_pc = ifelse(substr(train$Ticket, 1, 2) == "PC", 1, 0),
ticket_soto = ifelse(substr(train$Ticket, 1, 4) == "SOTO", 1, 0),
ticket_ston = ifelse(substr(train$Ticket, 1, 4) == "STON", 1, 0),
ticket_c_a = ifelse(substr(train$Ticket, 1, 4) == "C.A.", 1, 0),
ticket_ca = ifelse(substr(train$Ticket, 1, 2) == "CA", 1, 0),
ticket_a = ifelse(substr(train$Ticket, 1, 1) == "A", 1, 0),
ticket_3492 = ifelse(substr(train$Ticket, 1, 4) == "3493", 1, 0),
ticket_3470 = ifelse(substr(train$Ticket, 1, 4) == "3470", 1, 0),
ticket_1137 = ifelse(substr(train$Ticket, 1, 4) == "1137", 1, 0),
fare = Fare,
cabin_a = ifelse(substr(train$Cabin, 1, 1) == "A", 1, 0),
cabin_b = ifelse(substr(train$Cabin, 1, 1) == "B", 1, 0),
cabin_c = ifelse(substr(train$Cabin, 1, 1) == "C", 1, 0),
cabin_d = ifelse(substr(train$Cabin, 1, 1) == "D", 1, 0),
cabin_e = ifelse(substr(train$Cabin, 1, 1) == "E", 1, 0),
cabin_f = ifelse(substr(train$Cabin, 1, 1) == "F", 1, 0),
cabin_g = ifelse(substr(train$Cabin, 1, 1) == "G", 1, 0),
cabin_t = ifelse(substr(train$Cabin, 1, 1) == "T", 1, 0),
embark_cherbourg = ifelse(Embarked == "C", 1, 0),
embark_queenstown = ifelse(Embarked == "Q", 1, 0)) %>%
# SELECT RELEVANT VARIABLES #
select(-c(PassengerId, Survived, Pclass, Name, Sex, Age, SibSp, Parch, Ticket, Fare, Cabin, Embarked))
table(train$ticket_pc)
table(train$cabin_a)
